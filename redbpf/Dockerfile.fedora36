FROM fedora:36

ARG TARGETPLATFORM
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH

# Adding these 2 dnf.conf settings improved install times.
RUN echo "max_parallel_download=20" >> /etc/dnf/dnf.conf \
    && echo "fastestmirror=True" >> /etc/dnf/dnf.conf \
    && dnf install -y \
        pkg-config \
        clang \
        llvm \
        llvm-libs \
        llvm-devel \
        llvm-static \
        kernel \
        kernel-devel \
        elfutils-libelf-devel \
        make \
        zstd

RUN llvm-config --version | grep -q '^14'

# Install current stable Rust. The first goal of RedBPF build test is to
# support latest Rust release.
RUN curl https://sh.rustup.rs -sSf > rustup.sh \
    && sh rustup.sh -y \
          --default-toolchain stable \
          --profile minimal \
          --no-modify-path \
    && rm -f rustup.sh \
    && rustup component add rustfmt \
    && rustup --version \
    && cargo -vV \
    && rustc -vV

COPY extract-btf-aarch64.rs .

RUN if [ x$TARGETPLATFORM = x"linux/arm64" ]; then \
      rustc extract-btf-aarch64.rs \
      && gzip -dc /lib/modules/*/vmlinuz | ./extract-btf-aarch64 /dev/stdin /boot/vmlinux-btf; \
    else \
      /lib/modules/*/build/scripts/extract-vmlinux /lib/modules/*/vmlinuz > /boot/vmlinux; \
    fi
RUN rm -f extract-btf-aarch64.rs

WORKDIR /build
