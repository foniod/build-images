name: Docker

on:
  push:
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:
    types:
      - opened
      - edited

env:
  REDBPF_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/redbpf-build
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/foniod-build
  MAIN_BRANCH: main

jobs:
  redbpf-buildx-aarch64-and-push:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: --debug
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
            
      -
        name: Set image name lowercase
        run: |
          echo "REDBPF_IMAGE_NAME=${REDBPF_IMAGE_NAME,,}" >>${GITHUB_ENV}

      -
        name: Set up version information
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "$MAIN_BRANCH" ] && VERSION=latest
          echo "version=$VERSION" >> $GITHUB_ENV
      -
        name: Build aarch64 Debian11 for RedBPF
        id: aarch64-debian11
        run: |
          VERSION=${{ env.version }}-aarch64-debian11
          docker buildx build -f redbpf/Dockerfile.debian11 --platform linux/arm64 \
          -t $REDBPF_IMAGE_NAME:$VERSION --load ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build aarch64 Fedora36 for RedBPF
        id: aarch64-fedora36
        run: |
          VERSION=${{ env.version }}-aarch64-fedora36
          docker buildx build -f redbpf/Dockerfile.fedora36 --platform linux/arm64 \
          -t $REDBPF_IMAGE_NAME:$VERSION --load ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build aarch64 Ubuntu20.04 LTS for RedBPF
        id: aarch64-ubuntu2004
        run: |
          VERSION=${{ env.version }}-aarch64-ubuntu20.04
          docker buildx build -f redbpf/Dockerfile.ubuntu20.04 --platform linux/arm64 \
          -t $REDBPF_IMAGE_NAME:$VERSION --load ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build aarch64 Ubuntu22.04 LTS for RedBPF
        id: aarch64-ubuntu2204
        run: |
          VERSION=${{ env.version }}-aarch64-ubuntu22.04
          docker buildx build -f redbpf/Dockerfile.ubuntu22.04 --platform linux/arm64 \
          -t $REDBPF_IMAGE_NAME:$VERSION --load ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build aarch64 alpine edge for RedBPF
        id: aarch64-alpine-edge
        run: |
          VERSION=${{ env.version }}-aarch64-alpine-edge
          docker buildx build -f redbpf/Dockerfile.alpine-edge --platform linux/arm64 \
          -t $REDBPF_IMAGE_NAME:$VERSION --load ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      -
        name: Push image
        if: github.event_name == 'push'
        run: |
          docker push ${{ steps.aarch64-debian11.outputs.image_id }}
          docker push ${{ steps.aarch64-fedora36.outputs.image_id }}
          docker push ${{ steps.aarch64-ubuntu2004.outputs.image_id }}
          docker push ${{ steps.aarch64-ubuntu2204.outputs.image_id }}
          docker push ${{ steps.aarch64-alpine-edge.outputs.image_id }}

  redbpf-build-x86_64-and-push:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set image name lowercase
        run: |
          echo "REDBPF_IMAGE_NAME=${REDBPF_IMAGE_NAME,,}" >>${GITHUB_ENV}
      
      -
        name: Set up version information
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "$MAIN_BRANCH" ] && VERSION=latest
          echo "version=$VERSION" >> $GITHUB_ENV
      -
        name: Build x86_64 Debian11 for RedBPF
        id: x86_64-debian11
        run: |
          VERSION=${{ env.version }}-x86_64-debian11
          docker build -f redbpf/Dockerfile.debian11 \
          -t $REDBPF_IMAGE_NAME:$VERSION ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build x86_64 Fedora36 for RedBPF
        id: x86_64-fedora36
        run: |
          VERSION=${{ env.version }}-x86_64-fedora36
          docker build -f redbpf/Dockerfile.fedora36 \
          -t $REDBPF_IMAGE_NAME:$VERSION ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build x86_64 Ubuntu20.04 LTS for RedBPF
        id: x86_64-ubuntu2004
        run: |
          VERSION=${{ env.version }}-x86_64-ubuntu20.04
          docker build -f redbpf/Dockerfile.ubuntu20.04 \
          -t $REDBPF_IMAGE_NAME:$VERSION ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build x86_64 Ubuntu22.04 LTS for RedBPF
        id: x86_64-ubuntu2204
        run: |
          VERSION=${{ env.version }}-x86_64-ubuntu22.04
          docker build -f redbpf/Dockerfile.ubuntu22.04 \
          -t $REDBPF_IMAGE_NAME:$VERSION ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build x86_64 alpine-edge for RedBPF
        id: x86_64-alpine-edge
        run: |
          VERSION=${{ env.version }}-x86_64-alpine-edge
          docker build -f redbpf/Dockerfile.alpine-edge \
          -t $REDBPF_IMAGE_NAME:$VERSION ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Build x86_64 archlinux for RedBPF
        id: x86_64-archlinux
        run: |
          VERSION=${{ env.version }}-x86_64-archlinux
          docker build -f redbpf/Dockerfile.archlinux \
          -t $REDBPF_IMAGE_NAME:$VERSION ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      -
        name: Push image
        if: github.event_name == 'push'
        run: |
          docker push ${{ steps.x86_64-debian11.outputs.image_id }}
          docker push ${{ steps.x86_64-fedora36.outputs.image_id }}
          docker push ${{ steps.x86_64-ubuntu2004.outputs.image_id }}
          docker push ${{ steps.x86_64-ubuntu2204.outputs.image_id }}
          docker push ${{ steps.x86_64-alpine-edge.outputs.image_id }}
          docker push ${{ steps.x86_64-archlinux.outputs.image_id }}

  # NOTE: A redbpf-build-aarch64-gentoo-and-push job can not be supported since
  # it takes over 6 hours to finish building the docker image

  redbpf-build-x86_64-gentoo-and-push:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set image name lowercase
        run: |
          echo "REDBPF_IMAGE_NAME=${REDBPF_IMAGE_NAME,,}" >>${GITHUB_ENV}
      -
        name: Set up version information
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "$MAIN_BRANCH" ] && VERSION=latest
          echo "version=$VERSION" >> $GITHUB_ENV
      -
        name: Build x86_64 gentoo for RedBPF
        id: x86_64-gentoo
        run: |
          VERSION=${{ env.version }}-x86_64-gentoo
          docker build -f redbpf/Dockerfile.gentoo \
          -t $REDBPF_IMAGE_NAME:$VERSION ./redbpf
          echo "::set-output name=image_id::$REDBPF_IMAGE_NAME:$VERSION"
      -
        name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      -
        name: Push image
        if: github.event_name == 'push'
        run: |
          docker push ${{ steps.x86_64-gentoo.outputs.image_id }}

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set image name lowercase
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >>${GITHUB_ENV}

      - name: Set up version information
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "$MAIN_BRANCH" ] && VERSION=latest
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Build Ubuntu 22.04
        id: ubuntu2204
        run: |
          VERSION=${{ env.version }}-ubuntu-22.04
          docker build --no-cache \
                       -f Dockerfile.22.04 \
                       -t $IMAGE_NAME:$VERSION \
                       .
          echo "::set-output name=image_id::$IMAGE_NAME:$VERSION"

      - name: Build Ubuntu 20.04
        id: ubuntu2004
        run: |
          VERSION=${{ env.version }}-ubuntu-20.04
          docker build --no-cache \
                       -f Dockerfile.20.04 \
                       -t $IMAGE_NAME:$VERSION \
                       .
          echo "::set-output name=image_id::$IMAGE_NAME:$VERSION"

      - name: Build Ubuntu 18.04
        id: ubuntu1804
        run: |
          VERSION=${{ env.version }}-ubuntu-18.04
          docker build --no-cache \
                       -f Dockerfile.18.04 \
                       -t $IMAGE_NAME:$VERSION \
                       .
          echo "::set-output name=image_id::$IMAGE_NAME:$VERSION"

      - name: Build Fedora 36
        id: fedora36
        run: |
          VERSION=${{ env.version }}-fedora36
          docker build --no-cache \
                       -f Dockerfile.fedora36 \
                       -t $IMAGE_NAME:$VERSION \
                       .
          echo "::set-output name=image_id::$IMAGE_NAME:$VERSION"

      - name: Build Alpine Edge
        id: alpine-edge
        run: |
          VERSION=${{ env.version }}-alpine-edge
          docker build --no-cache \
                       -f Dockerfile.alpine-edge \
                       -t $IMAGE_NAME:$VERSION \
                       .
          echo "::set-output name=image_id::$IMAGE_NAME:$VERSION"

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        if: github.event_name == 'push'
        run: |
          docker push ${{ steps.ubuntu2204.outputs.image_id }}
          docker push ${{ steps.ubuntu2004.outputs.image_id }}
          docker push ${{ steps.ubuntu1804.outputs.image_id }}
          docker push ${{ steps.fedora36.outputs.image_id }}
          docker push ${{ steps.alpine-edge.outputs.image_id }}
